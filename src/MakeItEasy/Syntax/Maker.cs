//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace MakeItEasy.Syntax
{
    using System;
    using MakeItEasy.Internal;

    /// <summary>
    /// A helper class for creating systems under test. Typically there would be no need to access this
    /// class directly form outside the library.
    /// </summary>
    /// <typeparam name="T">The type of object to create.</typeparam>
    public sealed class Maker<T>
    {
        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        public T FromDefaults()
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TCollab1>(out TCollab1 collaborator1)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TCollab1, TCollab2>(out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TCollab1, TCollab2, TCollab3>(out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TCollab1, TCollab2, TCollab3, TCollab4>(out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                Type.EmptyTypes,
                new object?[0],
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        public T From<TArg1>(TArg1 argument1)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1>(TArg1 argument1, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1, TCollab2>(TArg1 argument1, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1, TCollab2, TCollab3>(TArg1 argument1, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1) },
                new object?[] { argument1 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        public T From<TArg1, TArg2>(TArg1 argument1, TArg2 argument2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1, TCollab2>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1, TCollab2, TCollab3>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, TArg2 argument2, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2) },
                new object?[] { argument1, argument2 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        public T From<TArg1, TArg2, TArg3>(TArg1 argument1, TArg2 argument2, TArg3 argument3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1, TCollab2>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1, TCollab2, TCollab3>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, TArg2 argument2, TArg3 argument3, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3) },
                new object?[] { argument1, argument2, argument3 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        public T From<TArg1, TArg2, TArg3, TArg4>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1, TCollab2>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1, TCollab2, TCollab3>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4) },
                new object?[] { argument1, argument2, argument3, argument4 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1, TCollab2>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1, TCollab2, TCollab3>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5) },
                new object?[] { argument1, argument2, argument3, argument4, argument5 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1, TCollab2>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1, TCollab2, TCollab3>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1, TCollab2>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1, TCollab2, TCollab3>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                Type.EmptyTypes,
                out object[] collaborators);
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1, TCollab2>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1, out TCollab2 collaborator2)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1), typeof(TCollab2) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1, TCollab2, TCollab3>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1, TCollab2, TCollab3, TCollab4>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            return subject;
        }

        /// <summary>
        /// Creates an object of type <typeparamref name="T"/>. One use for this object would be as the
        /// System Under Test for some test.
        /// </summary>
        /// <returns>The desired object.</returns>
        /// <typeparam name="TArg1">The type of argument1.</typeparam>
        /// <param name="argument1">Argument 1 to be used in the object constructor.</param>");
        /// <typeparam name="TArg2">The type of argument2.</typeparam>
        /// <param name="argument2">Argument 2 to be used in the object constructor.</param>");
        /// <typeparam name="TArg3">The type of argument3.</typeparam>
        /// <param name="argument3">Argument 3 to be used in the object constructor.</param>");
        /// <typeparam name="TArg4">The type of argument4.</typeparam>
        /// <param name="argument4">Argument 4 to be used in the object constructor.</param>");
        /// <typeparam name="TArg5">The type of argument5.</typeparam>
        /// <param name="argument5">Argument 5 to be used in the object constructor.</param>");
        /// <typeparam name="TArg6">The type of argument6.</typeparam>
        /// <param name="argument6">Argument 6 to be used in the object constructor.</param>");
        /// <typeparam name="TArg7">The type of argument7.</typeparam>
        /// <param name="argument7">Argument 7 to be used in the object constructor.</param>");
        /// <typeparam name="TArg8">The type of argument8.</typeparam>
        /// <param name="argument8">Argument 8 to be used in the object constructor.</param>");
        /// <typeparam name="TCollab1">The type of <paramref name="collaborator1"/> to return.</typeparam>
        /// <param name="collaborator1">Will be filled with a Fake TCollab1 collaborator used to create the object.</param>
        /// <typeparam name="TCollab2">The type of <paramref name="collaborator2"/> to return.</typeparam>
        /// <param name="collaborator2">Will be filled with a Fake TCollab2 collaborator used to create the object.</param>
        /// <typeparam name="TCollab3">The type of <paramref name="collaborator3"/> to return.</typeparam>
        /// <param name="collaborator3">Will be filled with a Fake TCollab3 collaborator used to create the object.</param>
        /// <typeparam name="TCollab4">The type of <paramref name="collaborator4"/> to return.</typeparam>
        /// <param name="collaborator4">Will be filled with a Fake TCollab4 collaborator used to create the object.</param>
        /// <typeparam name="TCollab5">The type of <paramref name="collaborator5"/> to return.</typeparam>
        /// <param name="collaborator5">Will be filled with a Fake TCollab5 collaborator used to create the object.</param>
        /// <typeparam name="TCollab6">The type of <paramref name="collaborator6"/> to return.</typeparam>
        /// <param name="collaborator6">Will be filled with a Fake TCollab6 collaborator used to create the object.</param>
        /// <typeparam name="TCollab7">The type of <paramref name="collaborator7"/> to return.</typeparam>
        /// <param name="collaborator7">Will be filled with a Fake TCollab7 collaborator used to create the object.</param>
        /// <typeparam name="TCollab8">The type of <paramref name="collaborator8"/> to return.</typeparam>
        /// <param name="collaborator8">Will be filled with a Fake TCollab8 collaborator used to create the object.</param>
        public T From<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TCollab1, TCollab2, TCollab3, TCollab4, TCollab5, TCollab6, TCollab7, TCollab8>(TArg1 argument1, TArg2 argument2, TArg3 argument3, TArg4 argument4, TArg5 argument5, TArg6 argument6, TArg7 argument7, TArg8 argument8, out TCollab1 collaborator1, out TCollab2 collaborator2, out TCollab3 collaborator3, out TCollab4 collaborator4, out TCollab5 collaborator5, out TCollab6 collaborator6, out TCollab7 collaborator7, out TCollab8 collaborator8)
        {
            var subject = Create(
                new[] { typeof(TArg1), typeof(TArg2), typeof(TArg3), typeof(TArg4), typeof(TArg5), typeof(TArg6), typeof(TArg7), typeof(TArg8) },
                new object?[] { argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8 },
                new[] { typeof(TCollab1), typeof(TCollab2), typeof(TCollab3), typeof(TCollab4), typeof(TCollab5), typeof(TCollab6), typeof(TCollab7), typeof(TCollab8) },
                out object[] collaborators);
            collaborator1 = (TCollab1)collaborators[0];
            collaborator2 = (TCollab2)collaborators[1];
            collaborator3 = (TCollab3)collaborators[2];
            collaborator4 = (TCollab4)collaborators[3];
            collaborator5 = (TCollab5)collaborators[4];
            collaborator6 = (TCollab6)collaborators[5];
            collaborator7 = (TCollab7)collaborators[6];
            collaborator8 = (TCollab8)collaborators[7];
            return subject;
        }

        private static T Create(Type[] argumentTypes, object?[] argumentValues, Type[] collaboratorTypes, out object[] collaboratorValues)
        {
            return SubjectBuilder.BuildSubject<T>(argumentTypes, argumentValues, collaboratorTypes, out collaboratorValues);
        }
    }
}
#nullable disable
